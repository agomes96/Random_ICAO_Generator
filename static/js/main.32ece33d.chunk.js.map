{"version":3,"sources":["components/CardComponent.js","components/IcaoGenerator.js","App.js","serviceWorker.js","index.js"],"names":["CardComponent","props","className","icao","src","lat","lon","frameBorder","style","border","title","allowFullScreen","name","fontSize","city","state","country","elevation","type","id","onClick","formSubmit","IcaoGenerator","useState","setIcao","setName","setCity","setState","setCountry","setLat","setLon","setElevation","Row","Col","xs","event","preventDefault","result","Object","values","airports","keys","Math","floor","random","length","generateIcao","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.32ece33d.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nfunction CardComponent(props){\r\n\r\n    return(\r\n        \r\n        <div className=\"card\">\r\n \r\n            {props.icao !== \"\" &&<div>\r\n            <iframe src={\"https://maps.google.com/maps?q=\"+props.lat+\",\"+props.lon+\"&t=k&z=13&output=embed\"} className=\"card-img-top\" frameBorder=\"0\" style={{border:0}} title=\"mapFrame\" allowFullScreen></iframe>\r\n   \r\n             <div className=\"card-body\">\r\n                <h5 className=\"card-title\">{props.name}</h5>\r\n                <ul className=\"list-group\">\r\n                    <li className=\"list-group-item list-group-item-success\"><i className=\"fa fa-briefcase\"style={{fontSize:20+\"px\"}}></i>   ICAO: {props.icao}</li>\r\n                    <li className=\"list-group-item list-group-item-success\"><i className=\"fa fa-user\"style={{fontSize:20+\"px\"}}></i>   Airport Name: {props.name}</li>\r\n                    <li className=\"list-group-item list-group-item-success\"><i className=\"fa fa-map-marker\"style={{fontSize:20+\"px\"}}></i>   City: {props.city}</li>\r\n                    <li className=\"list-group-item list-group-item-success\"><i className=\"fa fa-clock-o\"style={{fontSize:20+\"px\"}}></i>   State: {props.state}</li>\r\n                    <li className=\"list-group-item list-group-item-success\"><i className=\"fa fa-clock-o\"style={{fontSize:20+\"px\"}}></i>   Country: {props.country}</li>\r\n                    <li className=\"list-group-item list-group-item-success\"><i className=\"fa fa-inr\"style={{fontSize:20+\"px\"}}></i>   Latitude: {props.lat}</li>\r\n                    <li className=\"list-group-item list-group-item-success\"><i className=\"fa fa-inr\"style={{fontSize:20+\"px\"}}></i>   Longitude: {props.lon}</li>\r\n                    <li className=\"list-group-item list-group-item-success\"><i className=\"fa fa-inr\"style={{fontSize:20+\"px\"}}></i>   Elevation: {props.elevation}</li>\r\n                </ul>\r\n            \r\n            </div></div>\r\n            }\r\n            <div className=\"card-footer text-center\">\r\n                <button type=\"button\" className=\"btn \" id=\"left-panel-link\" onClick={props.formSubmit}>Generate</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardComponent","import React, {useState} from \"react\"\r\n\r\n//Database\r\nimport airports from \"../jsonDatabase/airports.json\"\r\n\r\n//Components\r\nimport CardComponent from \"./CardComponent\"\r\n\r\n//Bootstrapp\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col'\r\n\r\n\r\n\r\nfunction IcaoGenerator(){\r\n   \r\n    //State hooks\r\n    const [icao, setIcao] = useState(\"\")\r\n    const [name, setName] = useState(\"\")\r\n    const [city, setCity] = useState(\"\")\r\n    const [state, setState] = useState(\"\")\r\n    const [country, setCountry] = useState(\"\")\r\n    const [lat, setLat] = useState()\r\n    const [lon, setLon] = useState()\r\n    const [elevation, setElevation] = useState()\r\n\r\n    function formSubmitHandle(event){\r\n        event.preventDefault()\r\n        \r\n        generateIcao()\r\n        \r\n    }\r\n\r\n    function generateIcao(){\r\n        const result = Object.values(airports[Object.keys(airports)[Math.floor(Math.random() * Object.keys(airports).length)]])\r\n\r\n        setIcao(result[0])\r\n        setName(result[2])\r\n        setCity(result[3])\r\n        setState(result[4])\r\n        setCountry(result[5])\r\n        setLat(result[7])\r\n        setLon(result[8])\r\n        setElevation(result[6])\r\n        \r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <Row>\r\n                <Col></Col>\r\n                <Col xs={5}>\r\n                <CardComponent \r\n                    icao={icao} \r\n                    name={name} \r\n                    city={city} \r\n                    state={state} \r\n                    country={country} \r\n                    lat={lat} \r\n                    lon={lon} \r\n                    elevation={elevation}\r\n                    formSubmit={formSubmitHandle}\r\n                />\r\n                </Col>\r\n                <Col></Col>\r\n            </Row>\r\n            \r\n        </div>    \r\n    )\r\n}\r\n\r\nexport default IcaoGenerator","import React from 'react';\nimport './App.css';\n\nimport IcaoGenerator from \"./components/IcaoGenerator\"\n\nfunction App() {\n  return (\n    <IcaoGenerator />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}