{"version":3,"sources":["components/CardComponent.js","components/FormComponent.js","components/IcaoGenerator.js","App.js","serviceWorker.js","index.js"],"names":["CardComponent","props","className","icao","src","lat","lon","frameBorder","style","border","title","allowFullScreen","name","fontSize","city","state","country","elevation","FormComponent","Form","Group","as","Row","controlId","Label","column","sm","Col","Control","type","value","nameSearch","placeholder","onChange","handleChangeForm","countrySearch","countries","map","option","index","key","abbreviation","continentSearch","disabled","isContinentSelectEnable","IcaoGenerator","useState","setIcao","setName","setCity","setState","setCountry","setLat","setLon","setElevation","setNameSearch","setCountrySearch","setContinentSearch","setisContinentSelectEnable","formSubmitHandle","event","preventDefault","result","Object","values","airports","keys","Math","floor","random","length","resultContinentSearch","continent","resultContinent","continents","filter","continentData","countries_el","resultContinent_el","searchByContinent","console","log","countryCode","find","countryData","undefined","getCountryName","setResult","generateIcao","useEffect","xs","formSubmit","target","id","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.501a04ac.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nfunction CardComponent(props){\r\n\r\n    return(\r\n        \r\n        <div className=\"card\">\r\n \r\n            {props.icao !== \"\" &&\r\n                <div>\r\n\r\n                    <iframe \r\n                        src={\"https://maps.google.com/maps?q=\"+props.lat+\",\"+props.lon+\"&t=k&z=13&output=embed\"} \r\n                        className=\"card-img-top\" \r\n                        frameBorder=\"0\" \r\n                        style={{border:0}} \r\n                        title=\"mapFrame\" \r\n                        allowFullScreen>\r\n                    </iframe>\r\n        \r\n                    <div className=\"card-body\">\r\n                        <h5 className=\"card-title\">{props.name}</h5>\r\n                        <ul className=\"list-group\">\r\n\r\n                            <li className=\"list-group-item list-group-item-success\">\r\n                                <i className=\"fa fa-briefcase\"style={{fontSize:20+\"px\"}}>ICAO: {props.icao}</i>    \r\n                            </li>\r\n\r\n                            <li className=\"list-group-item list-group-item-success\">\r\n                                <i className=\"fa fa-user\"style={{fontSize:20+\"px\"}}>Airport Name: {props.name}</i>\r\n                            </li>\r\n\r\n                            <li className=\"list-group-item list-group-item-success\">\r\n                                <i className=\"fa fa-map-marker\"style={{fontSize:20+\"px\"}}>City: {props.city}</i>\r\n                            </li>\r\n\r\n                            <li className=\"list-group-item list-group-item-success\">\r\n                                <i className=\"fa fa-clock-o\"style={{fontSize:20+\"px\"}}>State: {props.state}</i>   \r\n                            </li>\r\n\r\n                            <li className=\"list-group-item list-group-item-success\">\r\n                                <i className=\"fa fa-clock-o\"style={{fontSize:20+\"px\"}}>Country: {props.country}</i>\r\n                            </li>\r\n\r\n                            <li className=\"list-group-item list-group-item-success\">\r\n                                <i className=\"fa fa-inr\"style={{fontSize:20+\"px\"}}>Lat/Long: {props.lat +\", \"+props.lon}</i>\r\n                            </li>\r\n\r\n                            <li className=\"list-group-item list-group-item-success\">\r\n                                <i className=\"fa fa-inr\"style={{fontSize:20+\"px\"}}>Elevation: {props.elevation}</i>\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardComponent","import React from \"react\"\r\n\r\nimport Form from 'react-bootstrap/Form'\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col'\r\nimport countries from \"../jsonDatabase/countries.json\"\r\n\r\nfunction FormComponent(props){\r\n\r\n    return(\r\n      \r\n        <Form className=\"card-body\">\r\n            <Form.Group as={Row} controlId=\"formTextName\">\r\n                <Form.Label column sm={2}>\r\n                    City or State\r\n                </Form.Label>\r\n                <Col sm={10}>\r\n                    <Form.Control \r\n                        type=\"text\" \r\n                        value={props.nameSearch} \r\n                        name=\"nameSearch\" \r\n                        placeholder=\"Enter a City or a State\" \r\n                        onChange={props.handleChangeForm}\r\n                    />\r\n                </Col>\r\n            </Form.Group>\r\n\r\n            <fieldset>\r\n                <Form.Group as={Row} controlId=\"formSelectCountry\">\r\n                    <Form.Label column sm={2}>\r\n                        Country\r\n                    </Form.Label>\r\n                    <Col sm={10}>\r\n                        <Form.Control \r\n                            as=\"select\" \r\n                            value={props.countrySearch}\r\n                            onChange={props.handleChangeForm}\r\n                            name=\"countrySearchInput\"\r\n                        >\r\n                            <option value=\"\">All</option>\r\n                            {countries.map((option, index) => {\r\n                                    return (<option key={index} value={option.abbreviation}>{option.country}</option>)\r\n                                })\r\n                            }    \r\n                        </Form.Control>\r\n                    </Col>\r\n\r\n                </Form.Group>\r\n            </fieldset>\r\n\r\n            <fieldset>\r\n                <Form.Group as={Row} controlId=\"formSelectContinent\">\r\n                    <Form.Label column sm={2}>\r\n                        Continent\r\n                    </Form.Label>\r\n                    <Col sm={10}>\r\n                        <Form.Control\r\n                            as=\"select\" \r\n                            value={props.continentSearch}\r\n                            onChange={props.handleChangeForm}\r\n                            name=\"continentSearchInput\"\r\n                            disabled={props.isContinentSelectEnable}\r\n                        >\r\n                            <option value=\"\">All</option>\r\n                            <option value=\"Africa\">Africa</option>\r\n                            <option value=\"Antarctica\">Antarctica</option>\r\n                            <option value=\"Asia\">Asia</option>\r\n                            <option value=\"Europe\">Europe</option>\r\n                            <option value=\"North America\">North America</option>\r\n                            <option value=\"Oceania\">Oceania</option>\r\n                            <option value=\"South America\">South America</option>\r\n                        </Form.Control>\r\n                    </Col>\r\n\r\n                </Form.Group>\r\n            </fieldset>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default FormComponent","import React, {useState, useEffect} from \"react\"\r\n\r\n//Database\r\nimport airports from \"../jsonDatabase/airports.json\"\r\nimport countries from \"../jsonDatabase/countries.json\"\r\nimport continents from \"../jsonDatabase/continents.json\"\r\n\r\n//Components\r\nimport CardComponent from \"./CardComponent\"\r\nimport FormComponent from \"./FormComponent\"\r\n\r\n//Bootstrapp\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col'\r\n\r\n\r\n\r\n\r\nfunction IcaoGenerator(){\r\n   \r\n    //State hooks\r\n    const [icao, setIcao] = useState(\"\")\r\n    const [name, setName] = useState(\"\")\r\n    const [city, setCity] = useState(\"\")\r\n    const [state, setState] = useState(\"\")\r\n    const [country, setCountry] = useState(\"\")\r\n    const [lat, setLat] = useState()\r\n    const [lon, setLon] = useState()\r\n    const [elevation, setElevation] = useState()\r\n\r\n    const [nameSearch, setNameSearch] = useState(\"\")\r\n    const [countrySearch, setCountrySearch] = useState(\"\")\r\n    const [continentSearch, setContinentSearch] = useState(\"\")\r\n\r\n    const [isContinentSelectEnable, setisContinentSelectEnable] = useState(false)\r\n\r\n    /**\r\n     * Function to handle the generate button\r\n     * @param {*} event \r\n     */\r\n    function formSubmitHandle(event){\r\n        event.preventDefault()\r\n        generateIcao()\r\n    }\r\n\r\n    /**\r\n     * Function to search the name of the country by the two digit code\r\n     * @param {string} countryCode Country code to search in DB\r\n     */\r\n    function getCountryName(countryCode){\r\n        const result = countries.find(countryData => countryData.abbreviation === countryCode).country\r\n        if(result !== undefined) \r\n            return result\r\n        return countryCode\r\n    }\r\n    \r\n    function generateIcao(){\r\n        \r\n        const result = generateIcaoFromAll()\r\n\r\n       \r\n        const resultContinentSearch = searchByContinent(continentSearch)\r\n\r\n\r\n        \r\n        console.log(resultContinentSearch)\r\n\r\n        setResult(result)\r\n        \r\n    }\r\n\r\n    function searchByContinent(continent){\r\n\r\n        const resultContinent = continents.filter(continentData => continentData.continent===continent).map(function({country}){\r\n            return {country};\r\n        })\r\n\r\n        const resultCountries = countries.filter(function(countries_el){\r\n            return resultContinent.filter(function(resultContinent_el){\r\n               return resultContinent_el.country === countries_el.country;\r\n            }).length === 1\r\n         })\r\n\r\n        ///FILTER AIRPORTS\r\n\r\n    }\r\n\r\n    \r\n\r\n    function generateIcaoFromAll(){\r\n        return Object.values(airports[Object.keys(airports)[Math.floor(Math.random() * Object.keys(airports).length)]])\r\n    }\r\n\r\n    function setResult(result){\r\n\r\n        setIcao(result[0])\r\n        setName(result[2])\r\n        setCity(result[3])\r\n        setState(result[4])\r\n        setCountry(getCountryName(result[5]))\r\n        setLat(result[7])\r\n        setLon(result[8])\r\n        setElevation(result[6])\r\n    }\r\n\r\n    /**\r\n     * Function to handle the form submit\r\n     * @param {object} event \r\n     */\r\n    function handleChangeForm(event) {\r\n        const {name, value} = event.target\r\n        if(name === \"continentSearchInput\"){\r\n            setContinentSearch(value)\r\n        }else if(name === \"countrySearchInput\"){\r\n            setCountrySearch(value)\r\n        }else(setNameSearch(value))\r\n        \r\n    }\r\n\r\n\r\n    /**\r\n     * Disable the continent form option when the country is selected\r\n     */\r\n    useEffect(() => {\r\n        if(countrySearch !== \"\"){\r\n            setisContinentSelectEnable(true)\r\n            setContinentSearch(\"\")\r\n        }else{\r\n            setisContinentSelectEnable(false)\r\n        }\r\n\r\n        \r\n    }, [countrySearch])\r\n    \r\n\r\n    return(\r\n        <div>\r\n            <Row>\r\n                <Col></Col>\r\n                <Col xs={6}>\r\n\r\n                    <CardComponent \r\n                        icao={icao} \r\n                        name={name} \r\n                        city={city} \r\n                        state={state} \r\n                        country={country} \r\n                        lat={lat} \r\n                        lon={lon} \r\n                        elevation={elevation}\r\n                        formSubmit={formSubmitHandle}\r\n                    />\r\n\r\n                    <FormComponent \r\n                        nameSearch={nameSearch}\r\n                        countrySearch={countrySearch}\r\n                        continentSearch={continentSearch}\r\n                        handleChangeForm={handleChangeForm}\r\n                        isContinentSelectEnable={isContinentSelectEnable}\r\n                        setisContinentSelectEnable={setisContinentSelectEnable}\r\n                    />\r\n\r\n                    <div className=\"card-footer text-center \">\r\n                        <button \r\n                            type=\"button\" \r\n                            className=\"btn \" \r\n                            id=\"left-panel-link\" \r\n                            onClick={formSubmitHandle}>\r\n                            Generate\r\n                        </button>\r\n                    </div>\r\n\r\n                </Col>\r\n                <Col></Col>\r\n            </Row>\r\n            \r\n        </div>    \r\n    )\r\n}\r\n\r\nexport default IcaoGenerator","import React from 'react';\nimport './App.css';\n\nimport IcaoGenerator from \"./components/IcaoGenerator\"\n\nfunction App() {\n\n  \n\n  return (\n    <IcaoGenerator />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}